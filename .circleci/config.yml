version: 2.1

orbs:
  node: circleci/node@5.0.2
  gh: circleci/github-cli@2.0
  aws-cli: circleci/aws-cli@4.1.3

commands:
  prep-env:
    description: "Prepare environment"
    steps:
      - checkout
      - node/install:
          install-yarn: true
          node-version: '18'
      - run: node --version
      - node/install-packages:
          pkg-manager: yarn
          override-ci-command: yarn install --frozen-lockfile
  install-deps:
    description: "Install Linux Dependencies"
    steps:
      - run: |
          sudo apt-get update
          sudo apt-get install -y apt-utils nsis p7zip-full libsecret-1-dev

branch-filters: &branch-filters
  tags:
    only: /^v.*/
  branches:
    ignore:
      - /.*/

jobs:
  pack-tarballs:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - prep-env
      - install-deps
      - run:
          name: Pack tarballs
          command: |
            yarn oclif pack tarballs
      - run:
          name: Upload Tarballs
          command: |
            yarn oclif upload tarballs

  pack-windows:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - prep-env
      - install-deps
      - run:
          name: Pack Windows Installer
          command: |
            yarn oclif pack win
      - run:
          name: Upload Windows Installer
          command: |
            yarn oclif upload win

  pack-mac:
    macos:
      xcode: 15.2.0
    steps:
      - prep-env
      - run:
          name: Install Certs
          command: |
              # Requires OSX_INSTALLER_CERT_BASE64, OSX_INSTALLER_CERT_PASSWORD, OSX_APPLICATION_CERT_BASE64, and OSX_APPLICATION_CERT_PASSWORD
              INSTALLER_CERTIFICATE="${TMPDIR}/installer_certificate.p12"
              APPLICATION_CERTIFICATE="${TMPDIR}/application_certificate.p12"
              OSX_KEYCHAIN="${TMPDIR}/app-signing.keychain-db"
              echo -n "$OSX_INSTALLER_CERT_BASE64" | base64 --decode --output $INSTALLER_CERTIFICATE
              echo -n "$OSX_APPLICATION_CERT_BASE64" | base64 --decode --output $APPLICATION_CERTIFICATE
              OSX_KEYCHAIN_PASSWORD=`openssl rand -hex 12`
              security create-keychain -p "$OSX_KEYCHAIN_PASSWORD" $OSX_KEYCHAIN
              security unlock-keychain -p "$OSX_KEYCHAIN_PASSWORD" $OSX_KEYCHAIN
              security set-keychain-settings -lut 21600 $OSX_KEYCHAIN
              security import $INSTALLER_CERTIFICATE -k $OSX_KEYCHAIN -f pkcs12 -A -T /usr/bin/codesign -T /usr/bin/security -P "$OSX_INSTALLER_CERT_PASSWORD"
              security import $APPLICATION_CERTIFICATE -k $OSX_KEYCHAIN -f pkcs12 -A -T /usr/bin/codesign -T /usr/bin/security -P "$OSX_APPLICATION_CERT_PASSWORD"
              security set-key-partition-list -S apple-tool:,apple: -k "$OSX_KEYCHAIN_PASSWORD" $OSX_KEYCHAIN
              security list-keychains -d user -s $OSX_KEYCHAIN login.keychain
              security find-identity
      # - run:
      #     name: Sign Node Binaries
      #     command: |
      #         BINARY_PATHS=(
      #           "node_modules/sqlite3/build/Release/node_sqlite3.node"
      #           "node_modules/keytar/build/Release/keytar.node"
      #         )
      #         for BINARY_PATH in "${BINARY_PATHS[@]}"; do
      #           codesign --sign "Developer ID Application: $DEVELOPER_ID_APPLICATION" --timestamp --options runtime --entitlements entitlements.plist "$BINARY_PATH"
      #         done
      - run:
          name: Pack MacOS Installer
          command: |
            yarn oclif pack macos
      # - run:
      #     name: Notarize MacOS Installer
      #     command: |
      #       # Requires APPLE_ID, APPLE_ID_APP_PASSWORD, and APPLE_TEAM_ID
      #       xcrun notarytool store-credentials new-profile --apple-id "$APPLE_ID" --password "$APPLE_ID_APP_PASSWORD" --team-id "$APPLE_TEAM_ID"

      #       for FILE_PATH in dist/macos/*.pkg; do
      #           echo "Notarizing $FILE_PATH..."
      #           pkgutil --check-signature "$FILE_PATH"
      #           xcrun notarytool submit "$FILE_PATH" --keychain-profile new-profile --wait -f json > "${TMPDIR}/notarization_log.json"
      #           notarization_status=$(jq -r .status "${TMPDIR}/notarization_log.json")
      #           notarization_id=$(jq -r .id "${TMPDIR}/notarization_log.json")
      #           echo "For notarization id ${notarization_id} the status is ${notarization_status}"

      #           if [ "${notarization_status}" = "Accepted" ]; then
      #             echo "Stapling $FILE_PATH..."
      #             xcrun stapler staple "$FILE_PATH"
      #             spctl --assess -vv --type install "$FILE_PATH"
      #           else
      #             echo "Notarization unsuccessful for $FILE_PATH"
      #             xcrun notarytool log ${notarization_id} --keychain-profile new-profile "${TMPDIR}/notarization_log.json"
      #             jq . "${TMPDIR}/notarization_log.json"
      #             exit 1
      #           fi
      #       done
      - run:
          name: Upload MacOS Installer
          command: |
            yarn oclif upload macos

  pack-deb:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - prep-env
      - install-deps
      - aws-cli/install
      - run:
          name: Import GPG Key
          command: |
            echo $GPG_PRIVATE_KEY_BASE64 | base64 --decode | gpg --import
      - run:
          name: Unlock Keychain
          command: |
            echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
            gpg-connect-agent reloadagent /bye
            echo "$GPG_PASSPHRASE" | gpg --batch --pinentry-mode loopback --passphrase-fd 0 --output /dev/null --sign
            
      - run:
          name: Pack Debian Installer
          command: |
            yarn oclif pack deb
      - run:
          name: Update install.sh
          command: |
            aws s3 cp src/scripts/install.sh s3://rmagent/install.sh
      - run:
          name: Upload Debian Installer
          command: |
            aws s3 cp dist/deb s3://rmagent/apt --recursive
workflows:
  build:
    jobs:
      - pack-tarballs:
          filters:
            <<: *branch-filters
      - pack-windows:
          filters:
            <<: *branch-filters
      - pack-mac:
          filters:
            <<: *branch-filters
      - pack-deb